# Stack & Queue demonstrations for Project 57
# This cell runs the practical code and prints "screenshot-style" outputs for the first two practical stack questions,
# and also demonstrates the challenge and queue practicals for clarity.

# ---------- Stack Practical 1 (Irembo) ----------
print("=== Stack Practical 1: Irembo ===")
stack_irembo = []
operations_irembo = ["Fill Form", "Upload File", "Confirm"]

print("Pushing sequence:", operations_irembo)
for op in operations_irembo:
    stack_irembo.append(op)
    print(f"  Pushed -> {op:12} | Stack now (bottom->top): {stack_irembo}")

# Undo one (pop)
popped_irembo = stack_irembo.pop()
print(f"\nUndo operation (pop): removed '{popped_irembo}'")
print("Remaining stack (bottom->top):", stack_irembo)

# Screenshot-style output for practical 1
print("\n+------------------------------+")
print("|  SCREENSHOT: IREMBO STACK   |")
print("+------------------------------+")
print("| After pushing: ['Fill Form',|")
print("|                'Upload File',|")
print("|                'Confirm']   |")
print("| After undo (pop): 'Confirm' |")
print("| Remaining (bottom->top):     |")
for item in stack_irembo:
    print(f"|   {item.ljust(24)}|")
print("+------------------------------+\n")


# ---------- Stack Practical 2 (UR student) ----------
print("=== Stack Practical 2: UR student ===")
stack_ur = []
classes = ["Class1", "Class2", "Class3"]
print("Pushing sequence:", classes)
for c in classes:
    stack_ur.append(c)
    print(f"  Pushed -> {c:7} | Stack now (bottom->top): {stack_ur}")

# Pop one
popped_ur = stack_ur.pop()
print(f"\nPopped (removed): '{popped_ur}'")
top_after_pop = stack_ur[-1] if stack_ur else None
print("Top after pop:", top_after_pop)

# Screenshot-style output for practical 2
print("\n+---------------------------+")
print("|  SCREENSHOT: UR STACK    |")
print("+---------------------------+")
print("| After pushing: ['Class1',|")
print("|                'Class2', |")
print("|                'Class3'] |")
print("| After pop: 'Class3'      |")
print("| Top now:                 |")
print(f"|   {str(top_after_pop).ljust(23)}|")
print("+---------------------------+\n")


# ---------- Challenge: Reverse "ICTRWANDA" using a stack ----------
print("=== Challenge: Reverse 'ICTRWANDA' using a stack ===")
s = "ICTRWANDA"
print("Original string:", s)

# Use a Python list as stack
stack_chars = []
print("\nStep 1: Push each character onto stack (showing pushes):")
for ch in s:
    stack_chars.append(ch)
    print(f"  push('{ch}') -> stack: {stack_chars}")

reversed_chars = []
print("\nStep 2: Pop each character to build reversed string (showing pops):")
while stack_chars:
    popped = stack_chars.pop()
    reversed_chars.append(popped)
    print(f"  pop() -> '{popped}' | reversed so far: {''.join(reversed_chars)}")

reversed_s = ''.join(reversed_chars)
print("\nReversed string result:", reversed_s, "\n")


# ---------- Queue Practical: CHUK (8 patients, 4 served) ----------
from collections import deque
print("=== Queue Practical: CHUK (8 patients) ===")
patients = [f"Patient{i}" for i in range(1,9)]  # Patient1 .. Patient8
q = deque(patients)
print("Initial queue (front->rear):", list(q))

served = 4
print(f"Serve {served} patients (dequeue {served} times)...")
for _ in range(served):
    served_patient = q.popleft()
    print(f"  Served: {served_patient}")

front_after = q[0] if q else None
print("Front of queue now:", front_after, "\n")


# ---------- Queue Practical: Airtel (3 clients) ----------
print("=== Queue Practical: Airtel (3 clients) ===")
clients = ["Client1", "Client2", "Client3"]
qa = deque(clients)
print("Queue (front->rear):", list(qa))
first_served = qa.popleft()
print("First served (who is served first?):", first_served, "\n")


# ---------- Challenge: Queue vs Stack for food delivery (simulation) ----------
print("=== Challenge: Queue vs Stack for Food Delivery ===")
orders = ["OrderA (10:00)", "OrderB (10:01)", "OrderC (10:02)", "OrderD (10:03)"]
print("Incoming orders (in time order):", orders)

# FIFO simulation (queue)
fifo = deque(orders)
fifo_delivery_order = []
print("\nFIFO delivery assignment (dequeue earliest first):")
while fifo:
    assign = fifo.popleft()
    fifo_delivery_order.append(assign)
    print(f"  Delivered -> {assign} | FIFO deliveries so far: {fifo_delivery_order}")

# LIFO simulation (stack)
lifo = list(orders)
lifo_delivery_order = []
print("\nLIFO delivery assignment (stack: last order assigned first):")
while lifo:
    assign = lifo.pop()
    lifo_delivery_order.append(assign)
    print(f"  Delivered -> {assign} | LIFO deliveries so far: {lifo_delivery_order}")

print("\nSummary:")
print("  FIFO order delivered:", fifo_delivery_order)
print("  LIFO order delivered:", lifo_delivery_order)

# End of demonstrations
print("\n=== End of code demonstrations ===")
